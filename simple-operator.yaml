apiVersion: v1
kind: ServiceAccount
metadata:
  name: exchangerates-operator
--- 

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: exchangerates-operator
rules:
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"]
- apiGroups: ["v1"]
  resources: ["configmaps"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]
- apiGroups: ["operators.gka038.github.io"]
  resources: ["exchangerates"]
  verbs: ["*"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: exchangerates-operator
subjects:
- kind: ServiceAccount
  name: exchangerates-operator
  namespace: default
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: exchangerates-operator
  apiGroup: rbac.authorization.k8s.io
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: exchanges-operator-config
data:
  install.sh: |
    #!/bin/sh
    apk --update add gcc build-base
    pip install --no-cache-dir kopf kubernetes requests
    kopf run /app/exchangerates-operator.py
  exchangerates-operator.py: |
    #!/usr/bin/env python3
    import kopf
    import kubernetes.config as k8s_config
    import kubernetes.client as k8s_client
    import requests

    exchange_rate_crd = k8s_client.V1CustomResourceDefinition(
        api_version="apiextensions.k8s.io/v1",
        kind="CustomResourceDefinition",
        metadata=k8s_client.V1ObjectMeta(name="exchangerates.operators.gka038.github.io"),
        spec=k8s_client.V1CustomResourceDefinitionSpec(
            group="operators.gka038.github.io",
            versions=[k8s_client.V1CustomResourceDefinitionVersion(
                name="v1",
                served=True,
                storage=True,
                schema=k8s_client.V1CustomResourceValidation(
                    open_apiv3_schema=k8s_client.V1JSONSchemaProps(
                        type="object",
                        properties={
                            "spec": k8s_client.V1JSONSchemaProps(
                                type="object",
                                properties={"currency":  k8s_client.V1JSONSchemaProps(
                                    type="string",
                                    enum=["CAD","CHF","GBP","JPY","PLN","USD"]
                                )}
                            ),
                            "status": k8s_client.V1JSONSchemaProps(
                                type="object",
                                x_kubernetes_preserve_unknown_fields=True
                            )
                        }
                    )
                )
            )],
            scope="Namespaced",
            names=k8s_client.V1CustomResourceDefinitionNames(
                plural="exchangerates",
                singular="exchangerate",
                kind="ExchangeRate",
                short_names=["er"]
            )
        )
    )

    try:
        k8s_config.load_kube_config()
    except k8s_config.ConfigException:
        k8s_config.load_incluster_config()

    api_instance = k8s_client.ApiextensionsV1Api()
    try:
        api_instance.create_custom_resource_definition(exchange_rate_crd)
    except k8s_client.rest.ApiException as e:
        if e.status == 409:
            print("CRD already exists")
        else:
            raise e

    def get_exchange_rate(currency):
        exchange_rates_url = 'https://api.exchangerate.host/latest'
        return requests.get(f"{exchange_rates_url}{currency}").json()['rates'][currency]

    def create_exchange_rate_config_map(namespace, data):
        api_instance = k8s_client.CoreV1Api()
        return api_instance.create_namespaced_config_map(namespace, data)


    def update_exchange_rate_config_map(namespace, name, new_data):
        api_instance = k8s_client.CoreV1Api()
        return api_instance.patch_namespaced_config_map(name, namespace, new_data)

    @kopf.on.create('operators.gka038.github.io', 'v1', 'exchangerates')
    def on_create(namespace, spec, body, **kwargs):
        currency = spec['currency']
        rate = get_exchange_rate(currency)
        data = __rate_to_config_map_data(rate)

        kopf.adopt(data)

        configmap = create_exchange_rate_config_map(namespace, data)
        return {'configmap-name': configmap.metadata.name}


    @kopf.on.update('operators.gka038.github.io', 'v1', 'exchangerates')
    def on_update(namespace, name, spec, status, **kwargs):
        currency = spec['currency']
        rate = get_exchange_rate(currency)
        name = status['on_create']['configmap-name']
        data = __rate_to_config_map_data(rate)

        update_exchange_rate_config_map(namespace, name, data)

    def __rate_to_config_map_data(rate):
        return {
            'data': {
                'rate': str(rate)
            }
        }
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: exchangerates-operator
  # annotations:
  #   "helm.sh/hook-delete-policy": hook-succeeded
  #   "helm.sh/hook": post-install,post-upgrade
spec:
  replicas: 1 # make sure to not have more than one replicas
  strategy:
    type: Recreate # make sure the old pod is being killed before the new pod is being created
  selector:
    matchLabels:
      app: exchangerates-operator
  template:
    metadata:
      labels:
        app: exchangerates-operator
    spec:
      containers:
      - name: exchangerates-operator
        image: python:3.8-alpine
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        # args: ["-c", "while true; do echo hello; sleep 10;done"]
        args: ["-c", "/app/install.sh"]
        volumeMounts:
        - name: configmap-mount
          mountPath: "/app"
          readOnly: true
      serviceAccountName: exchangerates-operator
      volumes:
      - name: configmap-mount
        configMap:
          name: exchanges-operator-config
          defaultMode: 0777

## command used to test locally 
## rancher kubectl delete -f all-in-one.yaml -n engine && rancher kubectl apply -f all-in-one.yaml -n engine 